#!/usr/bin/env python3
#
# MIT License
#

import os, sys, argparse, codecs, re

sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf8', buffering=1)

class MObj(object):
    def __init__(self, key, size, mtime):
        self.key = key
        self.size = size
        self.mtime = mtime

line_re = re.compile('([0-9]+)##(.+)##([0-9]+)')
def parseline(line):
    if not line:
        return None

    m = line_re.match(line)
    if not m:
        raise(Exception("Line '%s' not matched!"%(line,)))
    mtime, key, size = m.groups()

    return(MObj(key, int(size), int(mtime)))


def manifest_line_for_object(obj):
    key    = obj.key
    size   = str(obj.size)
    mtime  = str(obj.mtime)
    
    return('%s##%s##%s'%(mtime,key,size))

def print_extra(obj):
    print('+'+manifest_line_for_object(obj))
    return

def print_missing(obj):
    print('-'+manifest_line_for_object(obj))
    return

def print_too_old(obj, master_obj):
    print('!'+str(master_obj.mtime)+'_'+manifest_line_for_object(obj)+'_'+str(master_obj.size))
    return

def print_mismatch(obj, master_obj):
    print('~'+manifest_line_for_object(obj)+'_'+str(master_obj.size))
    return


def do_compare():
    master_file = codecs.open(args.master, 'r', 'utf-8')
    replica_file = codecs.open(args.replica, 'r', 'utf-8')

    # In python3, we are not conserned with overflowing int size
    # when dealing with many terrabytes of data...
    master_size  = 0
    master_count = 0
    extra_count  = 0
    extra_size   = 0
    replicated_size  = 0
    replicated_count = 0
    mobj = parseline(master_file.readline())
    robj = parseline(replica_file.readline())
    if mobj:
        master_size  += mobj.size
        master_count += 1
    while mobj or robj:
        if not mobj or (robj and mobj.key > robj.key):
            extra_count += 1
            extra_size  += robj.size
            print_extra(robj)
            robj = parseline(replica_file.readline())
            continue

        if not robj or mobj.key < robj.key:
            print_missing(mobj)
            mobj = parseline(master_file.readline())
            if mobj:
                master_size  += mobj.size
                master_count += 1
            continue

        # Keys are equal..
        if mobj.mtime > robj.mtime:
            print_too_old(robj, mobj)
        elif mobj.size != robj.size:
            print_mismatch(robj, mobj)
        else:
            # The object is matched!
            replicated_size  += mobj.size
            replicated_count += 1

        mobj = parseline(master_file.readline())
        robj = parseline(replica_file.readline())
        if mobj:
            master_size  += mobj.size
            master_count += 1

    replica_file.close()
    master_file.close()


    replication_size_fraction   = float(replicated_size)/master_size
    replication_count_fraction  = float(replicated_count)/master_count
    extra_size_fraction         = float(extra_size)/master_size
    extra_count_fraction        = float(extra_count)/master_count

    if args.summarise:
        print("    MASTER: %d objects, %d bytes." %(master_count, master_size))
        print("REPLICATED: %d objects (%.2f%%), %d bytes (%.2f%%)" % \
                (replicated_count, replication_count_fraction*100, replicated_size, replication_size_fraction*100))
        print("  NOMASTER: %d objects (%.2f%%), %d bytes (%.2f%%)" % \
                (extra_count, extra_count_fraction*100, extra_size, extra_size_fraction*100))

    if args.min_replicated_size_fraction is not None and replication_size_fraction < args.min_replicated_size_fraction:
        sys.exit(1)
    if args.min_replicated_count_fraction is not None and replication_count_fraction < args.min_replicated_count_fraction:
        sys.exit(2)
    if args.max_extra_size_fraction is not None and extra_size_fraction > args.max_extra_size_fraction:
        sys.exit(3)
    if args.max_extra_count_fraction is not None and extra_count_fraction > args.max_extra_count_fraction:
        sys.exit(4)

    return

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Diff a master and a replica manifest.',\
        epilog='Paths in master but not in replica are prepended with a -. '\
            'Paths in replica but not in master are prepended with a +. '\
            'Paths newer in master than in replica are prepended with a !. '\
            'Paths where sizes don\'t match are prepended with a ~.')
    parser.add_argument('-m', '--master', help='manifest file of master (source)', required=True)
    parser.add_argument('-r', '--replica', help='manifest file of replica', required=True)
    parser.add_argument('-s', '--summarise', help='summarise the delta heuristics', action='store_true')
    parser.add_argument('-Z', '--min-replicated-size-fraction', type=float, \
        help='When provided, exit value will be non-zero if the replica manifest accounts for less than this '\
            'fraction of the master manifest by size')
    parser.add_argument('-z', '--min-replicated-count-fraction', type=float, \
        help='When provided, exit value will be non-zero if the replica manifest accounts for less than this '
            'fraction of the master manifest by object count')
    parser.add_argument('-X', '--max-extra-size-fraction', type=float, \
        help='When provided, exit value will be non-zero if the total size of objects in the replica manifest'\
            'without a counterpart in the master manifest is larger than this fraction of the master\'s size')
    parser.add_argument('-x', '--max-extra-count-fraction', type=float, \
        help='When provided, exit value will be non-zero if the number of objects in the replica manifest'\
            'without a counterpart in the master manifest is larger than this fraction of the number of objects in the master')

    

    args = parser.parse_args()

    do_compare()

    sys.exit(0)
